What happens when you initialize a repository? Why do you need to do it?

git creates the .git directory, which will be used to track repo information.
It needs to be done... I guess so git can tell if you are committing to an
existing repo or a new one? to build the file structure? Why not do all this
on the first git command?


How is the staging area different from the working directory and the repository?
What value do you think it offers?

The staging area lets you decide what files to commit or not prior to committing.
The working directory has all of your stuff whether it is in the repo or not.
The repository has only what you have chosen to add.
The staging area lets you choose wisely (and change your mind before committing
if needed).


How can you use the staging area to make sure you have one commit per logical change?

Only add files to the staging area that have changes related to the other changes
in the staging area. Before committing, use git diff --staged to review your changes
and confirm that they are all related.


What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

Branches would be helpful if I am working on a larger enhancement and I want to
develop it separately from the main branch. Maybe the incomplete enhancement code
would break the running application, or maybe I need to keep the non-enhanced
code available for bug fixes. Or maybe my enhancement might turn out to be a bad
idea altogether, and I want to be able to discard it without having to worry about
any other changes that might have been made during its development - so a separate
branch will keep other people from making changes based on the experimental code
that will then be problematic to undo.


How do the diagrams help you visualize the branch structure?

They help show how each commit has a parent, and how you can "reach" certain
commits from various points but not from other points. Also, if I created a branch
after making some commits while I had an earlier commit checked out, the diagram
helps me make sense of that by showing me that this just gives that new thing I
created a name.

I guess it also means you can create a branch from anywhere in the past that you
like... go back to last tuesday and branch off of that.

And it explains why some commits could be unreachable. Also explains what the
HEAD node is.


What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

When the branches are merged, the changes for one branch are applied to the
code from the other branch. Showing this in the diagram as split and rejoined
lets us see that development of these items happened separately.


What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

Automatic merging can save some time and effort, as well as reducing human error,
as long as the merge is fairly straightforward.

However, it's certainly possible for an automatic merge to go awry. Let's say I have
x defined at the top of the file. User A removes x; user B adds something new that
uses x. We could very well wind up automatically applying both edits, which could
cause code to be invalid.

