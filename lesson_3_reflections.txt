When would you want to use a remote repository rather than keeping all your work
local?

    Certainly I'd want a remote for sharing work with others. I also use several
    computers, and this would allow me to keep everything in sync across
    machines. A remote would also allow me to sort of "publish" my work, so
    people could see not just the final product but any of the steps along the
    way.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    1. Someone else might be editing the code I'm working on, which could
    make things very confusing if what I'm working on changes while I'm in
    the middle of changing it myself.
    2. Pulling might need manual intervention - like when you can't auto-
    merge, and I don't want to drop what I'm doing at that moment to deal
    with it.
    3. Someone might commit something that introduces a bug that disrupts
    what I'm working on. I might want to avoid pulling changes until I
    know that they have committed a fix for the bug.
    4. Not sure, but maybe it is easier to back out changes in that way?

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    A branch is a reference to a specific commit, which has pointers to other
    commits as its ancestors. It is part of the repository. I would use this
    when I wanted to make some changes to a repository that I wanted to keep
    separate from the master branch of the repo until the changes were ready.
    Or, I might use them when making changes that I don't intend to save
    into the repository - e.g., for an experiment.

    A clone is a copy of a repository. I would use this when I wanted to make
    changes to a repository that I share with others, or that is on a remote
    machine. This allows multiple people to make changes, keeping track of
    who made what changes when, and helps people integrate their changes back
    to a central repository.

    A fork is also a copy of a repository, but stored on GitHub. I would use
    this to make changes to a repository that I don't have permission to edit.
    This gives me my own copy of the repository, which I can then modify as I
    like, share with others, etc. If I did want my changes to go back to the
    original repository, using a fork can help facilitate the process of
    making a request for my changes to be included in the original.

What is the benefit of having a copy of the last known state of the remote
stored locally?

    It allows you to easily compare any changes you've made locally with
    the state of the remote as of the last time you updated it. Then you
    can decide if you want to incorporate anything new on the remote with
    your current local master.

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    You could collaborate with a shared Google doc, but then you wouldn't
    have code in your favorite code editor, you wouldn't be able to translate,
    and it would be harder to tell who changed what. Also people could change
    things without others' review, which may or may not be what you want.
    But it'd be easier because you wouldn't have to go through these additional
    steps of making a pull request etc. It's a little like having getters
    and setters instead of just editing your variables directly. Sort of
    controls the access, a little.

    You could collaborate using Subversion, which is pretty much comparable to
    what we have here. The pull request part is nice. I don't know if SVN
    has similar functionality or not. If it does, I don't think we're using it.

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    It's like going into a separate room or not. Once you've been in the other
    room for a while, when you come out ready to show your work you may find
    that some of the parts have changed while you were away. You'll need to
    incorporate those changes into what you've built. So it allows you to work
    in an environment that isn't shifting until you ask it to update from
    master.

    It also allows you to get your changes ready and then they can be reviewed
    all at once. And I guess it allows review at all! If you are changing
    right in master then you're not getting the chance for review that a pull
    request has.

    Again with the comparison with getters and setters... changing the variable
    directly is easier but it's more dangerous. Here it's more dangerous bc
    you're not getting the benefit of a review.
